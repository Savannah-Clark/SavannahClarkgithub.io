---
title: "Divvy_Capstone"
author: "Savannah"
date: "2023-02-16"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

### Divvy_Exercise_Full_Year_Analysis

#### I will start by installing the required packages:

tidyverse for data import and wrangling, lubridate for date functions, ggplot for visualization.

`library(tidyverse)`

`library(lubridate)`

`library(ggplot2)`

#### STEP 1: COLLECT DATA

`q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")`

`q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")`

`q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")`

`q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")`

STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE

##### I will compare column names each of the files, and then make them the same so that I can stack them into one concise file 

`colnames(q3_2019)`

`colnames(q4_2019)`

`colnames(q2_2019)`

`colnames(q1_2020)`

##### Rename columns to make them consistent with q1_2020 (as this will be the supposed going-forward table design for Divvy)

`(q4_2019 <- rename(q4_2019 ,ride_id = trip_id ,rideable_type = bikeid ,started_at = start_time,ended_at = end_time,start_station_name = from_station_name ,start_station_id = from_station_id ,end_station_name = to_station_name ,end_station_id = to_station_id ,member_casual = usertype))`

`(q3_2019 <- rename(q3_2019 ,ride_id = trip_id ,rideable_type = bikeid ,started_at = start_time,ended_at = end_time,start_station_name = from_station_name ,start_station_id = from_station_id ,end_station_name = to_station_name ,end_station_id = to_station_id ,member_casual = usertype))`

`(q2_2019 <- rename(q2_2019 ,ride_id = "01 - Rental Details Rental ID" ,rideable_type = "01 - Rental Details Bike ID" ,started_at = "01 - Rental Details Local Start Time",ended_at = "01 - Rental Details Local End Time",start_station_name = "03 - Rental Start Station Name" ,start_station_id = "03 - Rental Start Station ID" ,end_station_name = "02 - Rental End Station Name" ,end_station_id = "02 - Rental End Station ID" ,member_casual = "User Type"))`

### Inspect the dataframes and look for incongruencies

`str(q1_2020)`

`str(q4_2019)`

`str(q3_2019)`

`str(q2_2019)`

#### Convert ride_id and rideable_type to character so that they can stack correctly

`q4_2019 <- mutate(q4_2019, ride_id = as.character(ride_id) ,rideable_type = as.character(rideable_type)) q3_2019 <- mutate(q3_2019, ride_id = as.character(ride_id) ,rideable_type = as.character(rideable_type)) q2_2019 <- mutate(q2_2019, ride_id = as.character(ride_id) ,rideable_type = as.character(rideable_type))`

#### Stack individual quarter's data frames into one big data frame

`all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)`

#### Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020

`all_trips <- all_trips %>% select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))`

#### STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS

I will inspect the new table that have been created:

`colnames(all_trips)`

`nrow(all_trips)`

`head(all_trips)`

`tail(all_trips)`

`str(all_trips)`

`summary(all_trips)`

#### There are a few problems we will need to fix:

I will need to make sure that the names used match 2020, as 2019 they used different titling. In the "member_casual" column, I will replace "Subscriber" with "member" and "Customer" with "casual"

`table(all_trips$member_casual)`

#### Reassign to the desired values (we will go with the current 2020 labels)

`all_trips <- all_trips %>% mutate(member_casual = recode(member_casual ,"Subscriber" = "member" ,"Customer" = "casual"))`

#### Check to make sure the proper number of observations were reassigned

`table(all_trips$member_casual)`

#### Aggregate Data

Add columns that list the date, month, day, and year of each ride

This will allow me to aggregate ride data for each month, day, or year ... before completing these operations I could only aggregate at the ride level

`all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd all_trips$month <- format(as.Date(all_trips$date), "%m") all_trips$day <- format(as.Date(all_trips$date), "%d") all_trips$year <- format(as.Date(all_trips$date), "%Y") all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")`

Now, I will add a "ride_length" calculation to all_trips (in seconds)

`all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)`

##### Inspect the structure of the columns

`str(all_trips)`

##### Convert "ride_length" from Factor to numeric so we can run calculations on the data

`is.factor(all_trips$ride_length) all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length)) is.numeric(all_trips$ride_length)`

##### Remove "bad" data

The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative. I will create a new version of the dataframe (v2) since data is being removed

`all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]`

####  STEP 4: CONDUCT DESCRIPTIVE ANALYSIS 

Descriptive analysis on ride_length (all figures in seconds) `mean(all_trips_v2$ride_length)`

`median(all_trips_v2$ride_length)`

`max(all_trips_v2$ride_length)`

`min(all_trips_v2$ride_length)`

##### I will condense the four lines above to one line using summary() on the specific attribute

`summary(all_trips_v2$ride_length)`

##### Compare members and casual users

`aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)`

`aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)`

`aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)`

`aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)`

##### See the average ride time by each day for members vs casual users

`aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)`

The days of the week are out of order, I will fix that now.

`all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))`

##### Now, I will run the average ride time by each day for members vs casual users

`aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)`

##### I will analyze ridership data by type and weekday

`all_trips_v2 %>% mutate(weekday = wday(started_at, label = TRUE)) %>%  group_by(member_casual, weekday) %>%  summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>% arrange(member_casual, weekday)`

##### I will visualize the number of rides by rider type

`all_trips_v2 %>% mutate(weekday = wday(started_at, label = TRUE)) %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(ride_length)) %>% arrange(member_casual, weekday) %>% ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) + geom_col(position = "dodge")`

![](Number_Of_Rides.jpeg)

##### I will create a visualization for average duration

`all_trips_v2 %>% mutate(weekday = wday(started_at, label = TRUE)) %>% group_by(member_casual, weekday) %>% summarise(number_of_rides = n() ,average_duration = mean(ride_length)) %>% arrange(member_casual, weekday) %>% ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge")`

![](Average_Duration.jpeg)

From here, I will export as a .csv file for any further analysis that is needed. From what I have presented though, we can start to answer the question: How do annual members and casual riders use Divvy bikes differently? We can tell that casual riders tend to use the bikes for a longer period of time, but no where near as often as members will.

The overall goal of doing this analysis is to see what Divvy bikes could do to convert casual riders to members. I would recommend conducting a survey and asking:

-   Are you a member?

-   Why or why not?

-   If you are a member, why did you become one?

-   If you are not a member, why not?

With some more consumer data, we could start to move forward with the questions: Why would casual riders buy Divvy's annual membership and how can we influence casual riders to become members?
